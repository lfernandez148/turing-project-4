[project]
name = "project-03"
version = "0.1.0"
description = """
Campaign Performance AI Assistant - Analyzes campaign performance reports and results, 
generates interactive charts, tables, and insights to optimize marketing strategies.
Provides comprehensive campaign analytics and visualization tools for data-driven 
marketing decisions.
"""
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "Lolo Fernandez", email = "lolof148@gmail.com"}
]
maintainers = [
    {name = "Lolo Fernandez", email = "lolof148@gmail.com"}
]
keywords = [
    "campaing-performance", 
    "chatbot", 
    "document-processing", 
    "vector-search", 
    "langchain", 
    "langgraph", 
    "streamlit",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Text Processing :: Linguistic",
]
dependencies = [
    "datasets>=4.1.1",
    "deepeval>=3.5.9",
    "diagrams>=0.24.4",
    "faker>=37.4.2",
    "fastapi>=0.116.1",
    "flask>=2.3.3",
    "ipykernel>=6.30.0",
    "jupyter>=1.1.1",
    "langchain-chroma>=0.2.5",
    "langchain-community>=0.3.27",
    "langchain-huggingface>=0.3.1",
    "langchain-openai>=0.3.28",
    "langgraph>=0.6.3",
    "langgraph-checkpoint-sqlite>=2.0.11",
    "langgraph-supervisor==0.0.29",
    "langsmith>=0.4.8",
    "loguru>=0.7.3",
    "matplotlib>=3.10.6",
    "mysql-connector-python>=9.4.0",
    "numpy>=2.3.1",
    "pandas>=2.3.1",
    "pillow>=10.0.0",
    "plotly>=6.2.0",
    "pypdf>=5.8.0",
    "python-docx>=1.2.0",
    "python-dotenv>=1.0.0",
    "qdrant-client>=1.15.1",
    "ragas>=0.3.5",
    "reportlab>=4.4.3",
    "requests>=2.31.0",
    "sentence-transformers>=5.0.0",
    "slowapi>=0.1.9",
    "streamlit-option-menu>=0.4.0",
    "unstructured>=0.18.11",
    "watchdog>=6.0.0",
    "wikipedia-tool>=1.0.0",
]

[project.urls]
Homepage = "https://github.com/yourusername/project-03"
Documentation = "https://github.com/yourusername/project-03#readme"
Repository = "https://github.com/yourusername/project-03.git"
Issues = "https://github.com/yourusername/project-03/issues"
Changelog = "https://github.com/yourusername/project-03/blob/main/CHANGELOG.md"

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
]
docs = [
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["ai", "api", "common"]

[tool.black]
line-length = 200
target-version = ['py312']

[tool.isort]
profile = "black"
line_length = 200

[tool.flake8]
max-line-length = 200
extend-ignore = ["E203", "W503"]

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --cov=ai --cov=api --cov-report=term-missing"
cache_dir = "tests/.pytest_cache"

[tool.coverage.run]
source = ["ai", "api", "common"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*"
]
data_file = "tests/.coverage"

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "tests/coverage_html"

[tool.coverage.xml]
output = "tests/coverage.xml"

[dependency-groups]
studio = [
    "loguru>=0.7.3",
    "python-dotenv>=1.1.1",
]
